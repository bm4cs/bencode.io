---
layout: post
title: "neomutt on fastmail (2022 edition)"
slug: "mutt"
date: "2015-08-18 21:03:40T10:00"
lastmod: "2022-02-26 15:44:24T11:00"
comments: false
categories:
    - linux
tags:
    - mutt
    - neomutt
    - mail
    - isync
    - pass
    - abook
    - linux
---

If you haven't heard of [neomutt](https://neomutt.org/) you're missing out.

> Mutt is a small but very powerful text-based mail client for Unix operating systems.

`neomutt` is a command line mail reader (MUA). It's a contemporary fork of the original `mutt` with added features, patch sets and fixes.

I started using the excellent terminal based mail client `mutt` recently, and its simplicity is totally refreshing. Using `mutt` it quickly becomes apparent how much useless baggage many modern (i.e. lazy) mail clients (e.g. Thunderbird, Outlook) actually bog you down with, not to mention the harrowing way they actually encode mail. Its taken me years to understand this:

> All mail clients suck. This one just sucks less.

Mutt is suprising feature packed. Supporting things like IMAP and threading out of the box.

As for most well designed software, its UNIX design philosophy becomes apparent, where it does its one thing well and allows other complimentary programs to bolster it. Such as periodic IMAP polling using `cron`. Like `git` mailboxes are local fully fleged copies, making it possible to email while on a flight perhaps or without mobile data reception.

Like all worth while things there is a little initial pain involved. You're going to need to understand how to craft a `.muttrc` to make mutt, your mutt.

If you're starting out of your `mutt` journey for the first time, I highly recommend checking out the [mutt-wizard](https://github.com/LukeSmithxyz/mutt-wizard) project started by [Luke Smith's](https://lukesmith.xyz/). Luke is a smart unit with a PhD in linguistics. His [configuration files](https://github.com/LukeSmithxyz/voidrice) are a wealth of knowledge. I have also learned a great deal from [HexDSL](https://hexdsl.com/) and his [dots](https://gitlab.com/hexdsl/dots/) repo.

My current (2022) terminal based mail setup is a composition of the following:

-   [fastmail](https://www.fastmail.com/) as my paid mail provider, exceptional value for money, so happy after being on gmail since 2005
-   `neomutt` as my MUA
-   `isync` using IMAP downloads and syncs mail locally, run by `cron` periodically `*/15 8-21 * * * mbsync -a`
-   `msmtp` to send outgoing email using SMTP
-   `pass` to safely encrypt credentials in my publically viewable [dot files](https://github.com/bm4cs/dots/)
-   `pam-gnupg` a PAM module that hands over your login password to `gpg-agent`, i.e., automatically log into GPG once logged into your system, see [doco](https://github.com/cruegge/pam-gnupg) for setup. On Debian I manually built it as described [below](#pam-gnupg)
-   `lynx` to view HTML encoded emails (gross)
-   `abook` command line based address book, using tab in the recipient field within `neomutt` will auto-suggest
-   `notmuch` index and search mail, `ctrl-f` in `mutt` will trigger this. Run `notmuch setup` if you don't have a `~/.notmuch-config` yet
-   `gpg` for crypto

My 2022 [muttrc](https://github.com/bm4cs/dots/blob/master/.config/neomutt/neomuttrc) integrates with the above and customises `neovim` further:

-   `vim` keys where possible
-   `neovim` as default editor
-   reads encrypted credentials using `pass`
-   has a signature block
-   configures each fastmail mailbox individually as a channel in `~/.mbsyncrc`
-   push toast notifications when new mail arrives `notify-send`
-   logical key binds (`gi` go to inbox, `Mi` move to inbox, `Ci` copy to inbox) possible targets `i` inbox, `a` archive, `s` sent, `d` drafts, `t` trash.
-   helpful regex highlights
-   contacts integration with `abook`

# Key Bindings

Forgotten your key binds, just hit `?` in `neomutt`.

Here are some common (famous) `mutt` key bindings, thanks to [zeth](http://files.zeth.net/mutt.txt):

```
==========================================================================
                             MUTT COMMANDS
==========================================================================

q      (x)      exit the current menu (abort without saving)
^g              cancel current action
?               list all keybindings for the current menu

==========================================================================
                             INDEX (browsing mailbox)
==========================================================================

^n     ^p       next/prev thread
m               compose a new message
d      (D)      delete the current message (matching a pattern)
u      (U)      undelete-message (matching a pattern)
C      (ALT C)  copy the current message to another mailbox (decode first)
s      (ALT s)  save-message (decode first)
r      (g)  (L) reply to sender (all recipients) (reply to mailing list)
f      (b)      forward message (bounce)
/      (ALT /)  search  (search-reverse)
c               change to a different mailbox/folder
F      (N)      mark as important (new)
l               show messages matching a pattern
o      (O)      change the current sort method (reverse sort)
t      (ALT t)  toggle the tag on a message (entire message thread)
T      (^t)     tag messages matching a pattern (untag)
v               view-attachments
<Return>        display-message
<Tab>           jump to the next new message
@               show the author's full e-mail address
$               save changes to mailbox
^l              clear and redraw the screen
ALT k           mail a PGP public key to someone


==========================================================================
                             PAGER (reading an email)
==========================================================================

<Return>        go down one line
<Space>  (-)    display the next page/message (previous)
^        ($)    jump to the top (bottom) of the message
/   (ALT /) (n) search for a regular expression (search backwards) (next match)
\               toggle search pattern coloring
S        (T)    skip beyond quoted text (toggle display of quoted text)


==========================================================================
                             COMPOSER (new email send options)
==========================================================================

y    (P)   (w)  send the message  (postpone)  (write to folder)
i               check spelling, if available
a    (A)   (D)  attach a file  (attach message)  (detach)
d               edit description on attachment
t      (ALT f)  edit the To field (From field)
c      (b)      edit the Cc field (Bcc field)
s               edit the Subject
r               edit the Reply-To field
p               select PGP options
ALT k           attach a PGP public key
^k              import a PGP public key (from attachment)
^f              wipe PGP passphrase from memory
f               specify an 'Fcc' mailbox i.e. sent folder
```

# GPG crypto

Handy for encrypting, decrypting, creating and validating digital signatures, all conveniently within `mutt`:

1. Install `gpg`.
1. Copy `/usr/share/doc/neomutt/samples/gpg.rc` to `~/.config/neomutt/`
1. Set the default key, by grabbing the last 8 hex digits from the fingerprint of your public key, by running `gpg --list-keys`
1. After composing mail in mutt, but before sending, hit `p` to bring up gpg options (such as encrypt, sign, both)
1. When reading mail, mutt will try to automatically decrypt and verify signatures destined to you

# Address book integration

`abook` is a stand-alone TUI program dedicated to contact management. Contacts are stored in a plain text, human-readable database. How refreshing!

I prefer to manually maintain my abook database:

1. Export contacts using [contacts.google.com](https://contacts.google.com/) web UI in vCard format. This outputs a `contacts.vcf`
1. In the `~/.abook` directory, run [adr_conv3.py](https://github.com/gavcos/Abook-Contact-Importer/blob/master/adr_conv3.py), which by default reads in `contacts.vcf` and outputs into a file called `addressbook`
1. Start `abook` which brings a TUI (text user interface) up, you should see all your contacts neatly organised.
1. In `mutt`, compose a new mail, enter part of the name of a known contact (e.g. 'Tom') and hit TAB to query your `abook` database.
1. Profit!

# pam-gnupg

This is needed to automatically schedule `isync` to run using `cron`. Given `pass` (a `gpg` frontend) is being used to securely bind credentials into the various config files, `pass` will interatively prompt for the `gpg` passphrase to your secret key. Interative user prompting doesn't work too well with `cron`.

Luckily [pam-gnupg](https://github.com/cruegge/pam-gnupg) solves this:

> A PAM module that hands over your login password to gpg-agent, which can be useful if you are using a GnuPG-based password manager like pass.

All `pam-gnupg` does is to send the password as entered to `gpg-agent`. Therefore its important that your user account password is the same as the passphrase on your GPG key.

This isn't a widely used piece of software (e.g., doesn't exist in the big repos for distros like Debian). Time to brush off `automake` and `gcc`:

```shell
sudo apt install libpam0g-dev     # install pam development headers
g clone git@github.com:cruegge/pam-gnupg.git
./autogen.sh
./configure
make
sudo make install
```

On Debian as `root` edit `/etc/pam.d/common-session` (`system-local-login` on Arch) adding the following block to the end:

```
auth     optional  pam_gnupg.so store-only
session  optional  pam_gnupg.so
```


