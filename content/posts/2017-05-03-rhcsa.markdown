---
layout: post
title: "RHCSA"
slug: "rhcsa"
draft: true
date: "2017-05-03 20:51:43"
lastmod: "2020-11-09 20:51:45"
comments: false
categories:
    - linux
tags:
    - certification
    - rhel
    - redhat
---

My preperation for the RHCSA 8 exam.

<!-- vim-markdown-toc GFM -->

* [Essential Tools](#essential-tools)
    * [Documentation](#documentation)
        * [man](#man)
        * [/usr/share/doc](#usrsharedoc)
        * [RPM bundled documentation](#rpm-bundled-documentation)
        * [General Searching Techniques](#general-searching-techniques)
    * [Shell history](#shell-history)
    * [Globbing](#globbing)
    * [I/O Redirection and Pipes](#io-redirection-and-pipes)
* [Essential File Management](#essential-file-management)
    * [Linux file system layout](#linux-file-system-layout)
    * [Finding Files](#finding-files)
        * [locate](#locate)
        * [find](#find)
    * [Archiving and compression with tar](#archiving-and-compression-with-tar)
    * [Hard and Soft Links](#hard-and-soft-links)
* [Working with text](#working-with-text)
    * [Regular expressions](#regular-expressions)
    * [grep](#grep)
    * [sed and awk](#sed-and-awk)
* [Switch Users (su)](#switch-users-su)
* [File Types and Permissions](#file-types-and-permissions)
    * [setuid setgid](#setuid-setgid)
    * [Sticky bit](#sticky-bit)
    * [umask (user mask)](#umask-user-mask)
* [User and Group Management](#user-and-group-management)
* [Rando cool](#rando-cool)

<!-- vim-markdown-toc -->

# Essential Tools

## Documentation

The ability to understand a program using local documentation resources; man, info, /usr/share/doc, within the RPM package.

### man

To browse man pages for a keyword use `-k`, e.g. scan documentation for all things relating to password:

    man -k password

Alternatively:

    mandb
    apropos passwd

Specific sections with man, refer to different topics, e.g. section 5 is about config files, so `man 5 passwd` would bring up the documentation on `/etc/passwd`.

1 = user commands
5 = configuration files
7 = broad topics such as background
8 = sys admin

    man -k user | grep 8 | grep create

### /usr/share/doc

A gold mine of documents and sample configuration files. Usually for distributions that are not considered core, and don't offer man or info pages.

### RPM bundled documentation

    $ rpm -qd tmux
    /usr/share/doc/tmux/CHANGES
    /usr/share/doc/tmux/FAQ
    /usr/share/doc/tmux/TODO
    /usr/share/man/man1/tmux.1.gz

### General Searching Techniques

General search engine:

    $ updatedb
    $ locate passwd

Search path for `passwd`:

    $ which passwd
    /usr/bin/passwd

Search one-line man page descriptions:

    $ whatis passwd
    passwd (1)           - update user's authentication tokens
    sslpasswd (1ssl)     - compute password hashes
    passwd (5)           - password file

Find binaries and man pages for `ls`:

    $ whereis -bm ls
    ls: /usr/bin/ls /usr/share/man/man1/ls.1.gz /usr/share/man/man1/ls.1p.gz

## Shell history

-   `history` dump history, by default the last 1000 commands
-   `ctrl+r` to search backwards through history for pattern
-   `history -c` clear history (in-memory only)
-   `history -w` write history
-   `!32` run history event 32 (again)

## Globbing

aka using wildcards see `man 7 glob`

-   `ls host*` zero or more chars
-   `ls ?ost` any single char
-   `ls [hm]ost` groups of chars
-   `ls [!hm]ost` negated groups of chars
-   `ls [0-9][0-9]script` multiple groups of restricted chars

## I/O Redirection and Pipes

-   `<` stdin from a file or another programs stdout
-   `>` stdout to new file (overwrite if exists)
-   `>>` stdout to file (appending if exists)
-   `2>` stderr redirection
-   `2>&1` stderr to stdout (useful for piping stderr, as pipes only work with stdout)
-   `|` pipe stdout from one program to stdin of another (pipes only support stdout to stdin communication, i.e. not stderr)

# Essential File Management

## Linux file system layout

See `man hier` and `man file-hierarchy`

Big hitters:

-   Boot partition: `/boot/` and `/efi/`
-   System configuration: `/etc/`
-   Scripts and binaries: `/bin/`, `/sbin/`, `/usr/sbin/` now all link back to `/usr/bin/`
-   Shared libraries: `/lib/`, `/lib64/` link to `/usr/lib/` and `/usr/lib64/` respectively
-   Virtual kernel file system: `/proc/` such as `/proc/meminfo`
-   Persistent variable data: `/var/` such as `/var/cache/`, `/var/log/`, `/var/tmp`

## Finding Files

### locate

    $ updatedb
    $ locate passwd

### find

Basic examples:

    $ find / -size +100M -exec ls -l {} \;
    $ find /etc -name motd  #named motd
    $ find /etc -user schnerg  #owned by user shnerg
    $ find / -mtime 3  #modified in last 3 days
    $ find / -mtime +3  #not within the last 3 days

    $ id ben
    uid=1000(ben) gid=1000(ben) groups=1000(ben),1004(finance)
    $ find / -uid 1000

    $ find / -user ben -type f  #filter by files
    $ find / -user ben -type f -exec cp {} /home/mary \; #execute a shell command against each result file `{}`

## Archiving and compression with tar

Creating archives:

    tar cvf foo.tar directory1 file1 file2
    tar czvf foo.tar.gz directory1 file1 file2 #with gzip
    tar cjvf foo.tar.bz directory1 file1 file2 #with bzip

List contents (without extraction):

    tar tvf foo.tar

Extract them:

    tar xvf foo.tar
    tar xzvf foo.tar.gz
    tar xjvf foo.tar.bz

Extract from a base directory:

    tar xvf foo.tar -C /

Diffencing an archives contents with an existing exploded structure:

    $ tar -dzvf dir1-v2.tar.gz
    directory1/
    directory1/file4
    directory1/wookie4
    tar: directory1/wookie4: Warning: Cannot stat: No such file or directory
    directory1/wookie3
    tar: directory1/wookie3: Warning: Cannot stat: No such file or directory
    directory1/file3
    directory1/imp1
    directory1/imp1: Mod time differs
    directory1/imp1: Size differs
    directory1/imp2
    directory1/file1
    directory1/file2

Compression:

    gzip file1
    gzip -d file1
    bzip2 file1

Listing compression stats on a compressed file:

    $ gzip -l hello1.gz
             compressed        uncompressed  ratio uncompressed_name
                     83                  62   6.5% hello1

Archiving with `star`.

    star -c -f=foo.tar directory1 hello1 hello2
    star -cz -f=foo.tar.gz directory1 hello1 hello2 #with compression

Listing

    $ star -t -f=foo.tar
    directory1/
    directory1/file4
    directory1/file3
    directory1/imp1
    directory1/imp2
    directory1/file1
    directory1/file2
    hello1
    hello2

Extract a specific (`hello1`) file from the archive:

    star -x -f=foo.tar hello1

## Hard and Soft Links

Soft links, or symbolic links (symlinks), are simply pointers to other files. Symlinks can span multiple file systems. Permissions on symlinks aren't real. The underlying permissions of the target file is what gets applied. They can easily be created with `ln` like so:

    ln -s /etc/motd ~/motd

Hard links are links to a specific inode (shown with `ls -i`) on the file system. Due to this coupling, cannot span different file systems or devices.

    $ ls -l
    drwxrwxr-x. 2 ben ben 4096 May 13 20:42 directory1
    -rw-rw-r--. 1 ben ben    0 May 13 20:53 hello1
    lrwxrwxrwx. 1 ben ben    9 May 14 17:31 motd -> /etc/motd

    $ ln hello1 hello1-hardlink
    $ ls -l
    drwxrwxr-x. 2 ben ben 4096 May 13 20:42 directory1
    -rw-rw-r--. 2 ben ben    0 May 13 20:53 hello1
    -rw-rw-r--. 2 ben ben    0 May 13 20:53 hello1-hardlink
    lrwxrwxrwx. 1 ben ben    9 May 14 17:31 motd -> /etc/motd

In the `ls` long listing output, take note of the 2nd column, which represents the count of references to the same inode, which increases after creating a hard link. Some properties of hard links:

-   Hard links will always report the same metadata such as permission bits, modification timestamps, etc
-   inode reference counts will increase for each hard link.
-   Removal of the target file or hard link will not result in broken links, as they both physically reference the same inode.

# Working with text

## Regular expressions

See `man 7 regex`

-   `.` any single character
-   `?` one or more
-   `*` zero or more

-   `cat` for concatenation, commonly used to dump contents to `stdout`
-   `tac` concatenation in reverse order
-   `cut` parses fields based on simple delimiter `cut -d : -f 1 /etc/passwd` cuts the first field in `/etc/passwd` based on a colon delimiter
-   `sort` can sort alphabetically or numerically e.g. `cut -d : -f 3 /etc/passwd | sort -n`
-   `head` first n lines
-   `tail` last n lines
-   `tr` translator e.g. lower to upper casing `cut -d : -f 1 /etc/passwd | tr [a-z] [A-Z]`

## grep

The pinnacle of text processing, handed down by god himself.

    grep '^#' /etc/sysconfig/sshd

Noteworthy:

-   always place regex between single quotes to avoid ambiguity of globbing
-   use `-e` to specify multiple expressions e.g. `man -k password | grep -e '1' -e '8'`
-   `-B` will provide n lines of before context e.g. `-B 5` shows preceding 5 lines of each match
-   `-v` to inverse (e.g. things not comments `grep -v '^#'`)
-   `-i` case insensitive
-   `[^linux]` negate characters, this will match against any characters that are not 'l', 'i', 'n', 'u' or 'x'.
-   `-E` extended regular expression support

## sed and awk

Powerful, line oriented text editors and full blown text based languages in their own right.

    awk -F : '/anna/ { print $4 }' /etc/passwd

`sed` is a stream based (i.e. non-interactive) editor.

Print line 5 (`-n` will suppress auto printing of pattern space):

    sed -n 5p /etc/passwd

Change user bill to william (`-i` is in-place mode and will mutate the target file, use without `-i` to test and write out to `stdout` first):

    sed -i s/bill/william/g /etc/passwd

Delete line 4 (using `-e` editor mode):

    sed -i -e '4d' /etc/passwd

# Switch Users (su)

A login shell (`.bash_profile`) vs interactive shell (`.bashrc`).

A login shell can be obtained by passed `-` (dash), `-l` or `--login` to the `su` command.

    su - shnerg
    su -l shnerg
    su --login shnerg

`/etc/profile` is the global shell configuration, and applies to all users login shells.

# File Types and Permissions

File permissions are applied at 3 levels; the owner, the group and everyone else. Each can read, write and/or execute.

A sample file permission bitmap could be `-rwxrw-rw-`. The first bit `-` a dash indicates its a plain old file (there are several types, such as `l` for symlink, `d` a directory, ...). Then the owner, group and other bits.

`chmod` supports symbolic and octal variations of permissions. Some symbolic examples:

    chmod u+x file1
    chmod g-rw file1
    chmod o+wx file1
    chmod +x file1

-   To navigate directory structure, requires execute permission on the directory. Execute bits could be set on directories, but not files, to allow a browsable tree, using `chmod` with the `X` (big x) modifier.
-   When creating new files, the default owner and group will be that of the user (e.g. ben). `newgrp finance` will default the group to `finance`.
-   Default permissions are applied with `umask`.

    groupadd finance #add group
    getent group #verify
    usermod -G finance amy #add user to group
    mkdir /home/finance #create a dir
    chown :finance /home/finance #change its group
    chmod -R o-rwx g+rw /home/finance #remove other perms and +rw group perms
    exit #logout user to reload groups

Recursively setting execute on directories only:

    chmod ugo-x -R finance #strip execute on everything
    chmod ug+X -R finance #user and group directory exec bit only

To apply the permission bits to all specify `a` (as opposed to the usual `u`, `g` and `o`):

    chmod a+r file1

## setuid setgid

The running of processes as their original owner. Impersonation if you will. Known as suid. Take for example the `/usr/bin/passwd` program:

    -rwsr-xr-x.   1 root root       27872 Feb  5  2016 passwd
       ^

Note the `s` (suid) bit. While `passwd` is owned and grouped by root, its runnable by average joe users under roots context, as if being run by the real root user. Can be set with `chmod`:

    chmod u+s file1 #set s-bit for user
    chmod 4500 file1 #set s-bit for user with 500
    chmod 2500 file1 #set s-bit for group with 500
    chmod 6444 file #set s-bit both user and group with 444

## Sticky bit

Prevents the removal of files and/or directories unless the rightful owner. To set:

    chmod +t dolphin #set sticky bit
    chmod 1777 dolphin #set sticky and 777

`+t` sets the sticky bit:

    drw-rw---T. 1 ben  finance    0 May 14 19:06 dolphin
             ^

The sticky bit in Linux is only useful when applies to directories. Files within "sticky" directories will no be deletable.

## umask (user mask)

Defines the default, user specific permission mask. For files, the default is 666 or read/write and no execute for user/group/other. For directories, the default is 777 or read/write/execute for user/group/other.

    $ umask
    0022

Breaking down each bit. The first `0` will not apply any mask to the special bits (suid/guid/sticky bit). The second `0` will apply no mask to the owner. The third `2` will mask out (think subtract) _write_ permission (2 in octal), and similarly for all other users for the fourth `2` will strip write perms.

# User and Group Management

By default prvileged users (such as root) have UID less than 200. Also their group is typically set to `wheel`, to pickup sgid (pseudo impersonation privileges).

    id -gn #users group name
    id -un #users user name

# Rando cool

-   `ctrl+l` = clear terminal
-   `ls -d` don't show contents of directories
-   `\ls` un-alias a command, by preceding it with a backslash `\`
-   `alias` to display evaluated bash aliases
-   `tar` command options are not prefixed with a hypen `-`
-   `tac` is the inverse program of `cat`
-   `chvt` jumps between TTY e.g. `chvt 3`
